# In this section, add all machines in this installation.
#
# Ansible connects to the machine on `ansible_host`
# The machines talk to eachother on `ip`
#
# <hostname> ansible_host=<internal_ip>
[all]
# If you are in an offline environment, add an assethost here, from which
# artifacts are served
# assethost ansible_host=100.89.14.74 ip=10.114.0.9
assethost ansible_host=172.16.0.128

kubenode1 ansible_host=172.16.0.129
kubenode2 ansible_host=172.16.0.130 node_labels="{'wire.com/role': 'sftd'}" node_annotations="{'wire.com/external-ip': 'EXTERNAL_IP'}"
kubenode3 ansible_host=172.16.0.131
ansnode1 ansible_host=172.16.0.132
ansnode2 ansible_host=172.16.0.133
ansnode3 ansible_host=172.16.0.134

# If you need to tunnel ssh connections through a bastion host (because your
# nodes are not directly reachable from the machine running ansible), define a
# bastion host as well, and uncomment the [bastion] section below.
#
# bastion ansible_host=XXXX ansible_user=some_user

# Below variables are set for all machines in the inventory.
[all:vars]
# If you need to ssh as a user that's not the same user as the one running ansible
ansible_user=demo
ansible_password=fai
ansible_sudo_pass=fai

# Usually, you want to have a separate keypair to ssh to these boxes,
# and tell ansible where it is by setting `ansible_ssh_private_key_file`.
# ansible_ssh_private_key_file = ./dot_ssh/id_ed25519
# Note adding it to the ssh agent won't work in scenarios where ansible
# execution is wrapped through a container, as the ssh-agent socket isn't
# accessible there.

[cassandra:vars]
cassandra_network_interface = ens3

[elasticsearch:vars]
elasticsearch_network_interface = ens3

[minio:vars]
minio_network_interface = ens3
prefix = "DOMAIN-"
domain = "DOMAIN"
deeplink_title = "DOMAIN environment"

[restund:vars]
# Uncomment if your public IP is not on the default gateway
# restund_network_interface = enp1s0
# Uncomment and set to the true public IP if you are behind 1:1 NAT
# restund_peer_udp_advertise_addr = a.b.c.d
restund_peer_udp_advertise_addr = EXTERNAL_IP
# Explicitly specify the restund user id to be "root" to override the default of "997"
restund_uid = root

# For the following groups, add all nodes defined above to the sections below.
# Define any additional variables that should be set for these nodes.

# Uncomment this is you use the bastion host
# [bastion]
# bastion

# Add all nodes that should be the master
[kube-master]
kubenode1
kubenode2
kubenode3

[etcd]
# !!! There MUST be an UNEVEN amount of etcd servers
#
# Uncomment if etcd and kubernetes are colocated
#
kubenode1 etcd_member_name=etcd1
kubenode2 etcd_member_name=etcd2
kubenode3 etcd_member_name=etcd3
#
# Uncomment if etcd cluster is separately deployed from kubernetes masters
# etcd1 etcd_member_name=etcd1
# etcd2 etcd_member_name=etcd2
# etcd3 etcd_member_name=etcd3

# Add all worker nodes here
[kube-node]
kubenode1
kubenode2
kubenode3

# Additional worker nodes can be added
# You can label and annotate nodes. E.g. when deploying SFT you might want to
# deploy it only on certain nodes due to the public IP requirement.
# kubenode4 node_labels="{'wire.com/role': 'sftd'}" node_annotations="{'wire.com/external-ip': 'XXXX'}"
# kubenode5 node_labels="{'wire.com/role': 'sftd'}" node_annotations="{'wire.com/external-ip': 'XXXX'}"

# leave this group as is
[k8s-cluster:children]
kube-master
kube-node

[restund]
ansnode1

# Add all cassandra nodes here
[cassandra]
ansnode1
ansnode2
ansnode3

# add a cassandra seed
[cassandra_seed]
ansnode1

# Add all elasticsearch nodes here
[elasticsearch]
ansnode1
ansnode2
ansnode3

# leave this as is
[elasticsearch_master:children]
elasticsearch

# Add all minio nodes here
[minio]
ansnode1
ansnode2
ansnode3
