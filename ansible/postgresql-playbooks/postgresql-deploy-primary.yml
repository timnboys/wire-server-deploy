---
- name: Deploy PostgreSQL Primary node (Basic Setup)
  hosts: postgresql_rw
  become: yes
  gather_facts: yes
  vars:
    primary_node: "{{ hostvars[(groups.get('postgresql_rw', []) | first) | default('postgresql1')]['ansible_default_ipv4']['address'] | default(hostvars[(groups.get('postgresql_rw', []) | first) | default('postgresql1')]['ansible_host'] | default((groups.get('postgresql_rw', []) | first) | default('postgresql1'))) }}"
    replica_node1: "{{ hostvars[(groups.get('postgresql_ro', []) | first) | default('postgresql2')]['ansible_default_ipv4']['address'] | default(hostvars[(groups.get('postgresql_ro', []) | first) | default('postgresql2')]['ansible_host'] | default((groups.get('postgresql_ro', []) | first) | default('postgresql2'))) }}"
    replica_node2: "{{ hostvars[(groups.get('postgresql_ro', []) | last) | default('postgresql3')]['ansible_default_ipv4']['address'] | default(hostvars[(groups.get('postgresql_ro', []) | last) | default('postgresql3')]['ansible_host'] | default((groups.get('postgresql_ro', []) | last) | default('postgresql3'))) }}"
    pg_service_name: "postgresql@{{ postgresql_version }}-main.service"
  tasks:
    - name: Ensure repmgr scripts directory exists
      ansible.builtin.file:
        path: /opt/repmgr/scripts
        state: directory
        owner: postgres
        group: postgres
        mode: "0755"

    - name: Ensure repmgr configuration directory exists
      ansible.builtin.file:
        path: "/etc/repmgr/{{ postgresql_version }}-main"
        state: directory
        owner: postgres
        group: postgres
        mode: "0755"

    - name: Deploy basic primary configuration files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: "{{ item.mode }}"
        backup: yes
      loop:
        - src: ../templates/postgresql/pg_hba.conf.j2
          dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
          mode: "0640"
        - src: ../templates/postgresql/postgresql_primary.conf.j2
          dest: "{{ postgresql_conf_dir }}/postgresql.conf"
          mode: "0640"
        - src: ../templates/postgresql/repmgr.conf.j2
          dest: "/etc/repmgr/{{ postgresql_version }}-main/repmgr.conf"
          mode: "0644"
        - src: ../templates/postgresql/pgpass.j2
          dest: "/var/lib/postgresql/.pgpass"
          mode: "0600"
        - src: ../templates/postgresql/simple_fence.sh.j2
          dest: "/opt/repmgr/scripts/simple_fence.sh"
          mode: "0755"
        - src: ../templates/postgresql/failover_validation.sh.j2
          dest: "/opt/repmgr/scripts/failover_validation.sh"
          mode: "0755"
      register: primary_conf_result

    - name: Deploy repmgrd service template
      ansible.builtin.template:
        src: ../templates/postgresql/repmgrd_service.j2
        dest: "/etc/systemd/system/repmgrd@.service"
        owner: root
        group: root
        mode: "0644"
      register: repmgrd_service_result

    - name: Reload systemd if service template changed
      ansible.builtin.command: systemctl daemon-reload
      when: repmgrd_service_result.changed

    - name: Restart PostgreSQL if configuration changed
      ansible.builtin.service:
        name: "{{ pg_service_name }}"
        state: restarted
      when: primary_conf_result.changed

    - name: Ensure PostgreSQL instance is running and enabled
      ansible.builtin.service:
        name: "{{ pg_service_name }}"
        state: started
        enabled: yes

    - name: Wait for PostgreSQL to be ready
      ansible.builtin.wait_for:
        port: 5432
        host: "127.0.0.1"
        delay: 5
        timeout: 60

    # ===== DATABASE SETUP =====
    - name: Setup database users and structures
      block:
        # Legacy replication setup
        - name: Setup legacy replication
          block:
            - name: Create legacy replication user
              community.postgresql.postgresql_user:
                name: "{{ repsvc_user }}"
                password: "{{ repsvc_password }}"
                role_attr_flags: REPLICATION,LOGIN
                login_db: postgres
                state: present
              become_user: postgres

            - name: Create legacy replication slots
              community.postgresql.postgresql_slot:
                name: "{{ item }}"
                slot_type: physical
                state: present
                login_db: postgres
              loop: "{{ replica_nodes }}"
              become_user: postgres

          when: not (repmgr_enabled | default(false))

        # repmgr setup
        - name: Setup repmgr infrastructure
          block:
            - name: Create repmgr user
              community.postgresql.postgresql_user:
                name: "{{ repmgr_user }}"
                password: "{{ repmgr_password }}"
                role_attr_flags: SUPERUSER,REPLICATION
                login_db: postgres
                state: present
              become_user: postgres

            - name: Create repmgr database
              community.postgresql.postgresql_db:
                name: "{{ repmgr_database }}"
                owner: "{{ repmgr_user }}"
                state: present
              become_user: postgres

            - name: Create repmgr extension
              community.postgresql.postgresql_ext:
                name: repmgr
                db: "{{ repmgr_database }}"
                login_host: "127.0.0.1"
                login_user: "{{ repmgr_user }}"
                login_password: "{{ repmgr_password }}"
                state: present
              become_user: postgres

          when: repmgr_enabled | default(false)

    # ===== REPMGR REGISTRATION =====
    - name: Register primary with repmgr
      block:
        - name: Check current repmgr registration status
          ansible.builtin.command:
            cmd: sudo -u postgres repmgr -f /etc/repmgr/{{ postgresql_version }}-main/repmgr.conf node status
          register: repmgr_status_check
          failed_when: false
          changed_when: false

        - name: Register primary node
          ansible.builtin.command:
            cmd: sudo -u postgres repmgr -f /etc/repmgr/{{ postgresql_version }}-main/repmgr.conf primary register
          when: repmgr_status_check.rc != 0
          register: repmgr_registration
          failed_when:
            - repmgr_registration.rc != 0
            - "'already registered' not in repmgr_registration.stderr"

        - name: Display registration status
          ansible.builtin.debug:
            msg: "{{ 'Primary registered successfully' if repmgr_registration.changed else 'Primary already registered' }}"

        - name: Verify repmgr database connectivity
          community.postgresql.postgresql_query:
            login_host: "127.0.0.1"
            login_user: "{{ repmgr_user }}"
            login_password: "{{ repmgr_password }}"
            login_db: "{{ repmgr_database }}"
            query: "SELECT 'connection_test' as status"
          become_user: postgres
          register: repmgr_connection_test

        - name: Start repmgrd service
          ansible.builtin.systemd:
            name: "repmgrd@{{ postgresql_version }}-main"
            state: started
            enabled: yes
            daemon_reload: yes
          when: repmgr_connection_test is succeeded

        - name: Verify repmgrd is running
          ansible.builtin.systemd:
            name: "repmgrd@{{ postgresql_version }}-main"
          register: repmgrd_status

        - name: Display repmgrd status
          ansible.builtin.debug:
            msg: "repmgrd service: {{ repmgrd_status.status.ActiveState }}"

      when: repmgr_enabled | default(false)

    - name: Display setup completion
      ansible.builtin.debug:
        msg: |
          ===== PRIMARY SETUP COMPLETE =====
          PostgreSQL Primary is running on {{ ansible_hostname }}
          Service: {{ pg_service_name }}
          repmgr: {{ 'Enabled and running' if (repmgr_enabled | default(false)) else 'Disabled (legacy mode)' }}
          Next: Deploy replicas using postgresql-deploy-replica-basic.yml
