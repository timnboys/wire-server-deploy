---
- name: Deploy PostgreSQL replica services with repmgr streaming replication
  hosts: postgresql_ro
  become: yes
  gather_facts: yes
  serial: 1 # Deploy replicas one at a time
  vars:
    primary_node: "{{ hostvars[groups['postgresql_rw'][0]]['ansible_default_ipv4']['address'] | default(hostvars[groups['postgresql_rw'][0]]['ansible_host']) }}"
    current_replica: "{{ ansible_default_ipv4.address | default(ansible_host) }}"
    pg_service_name: "postgresql@{{ postgresql_version }}-main.service"
  tasks:
    # ===== PHASE 1: INITIAL STATUS CHECK =====
    - name: Check replica configuration status
      block:
        - name: Check repmgr registration status
          ansible.builtin.command:
            cmd: sudo -u postgres repmgr -f /etc/repmgr/{{ postgresql_version }}/repmgr.conf node status
          register: repmgr_status
          failed_when: false
          changed_when: false

        - name: Check if replica is already configured
          ansible.builtin.stat:
            path: "{{ postgresql_data_dir }}/standby.signal"
          register: replica_configured

        - name: Display current status
          ansible.builtin.debug:
            msg: |
              Replica Status for {{ ansible_hostname }}:
              - repmgr registered: {{ repmgr_status.rc == 0 }}
              - Data configured: {{ replica_configured.stat.exists }}
              - Action needed: {{ not replica_configured.stat.exists }}

    # ===== PHASE 2: CONFIGURATION DEPLOYMENT =====

    - name: Deploy replica configuration files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: "{{ item.mode }}"
        backup: yes
      loop:
        - src: ../templates/pg_hba.conf.j2
          dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
          mode: "0640"
        - src: ../templates/postgresql_replica.conf.j2
          dest: "{{ postgresql_conf_dir }}/postgresql.conf"
          mode: "0640"
        - src: ../templates/repmgr.conf.j2
          dest: "/etc/repmgr/{{ postgresql_version }}/repmgr.conf"
          mode: "0644"
        - src: ../templates/pgpass.j2
          dest: "/var/lib/postgresql/.pgpass"
          mode: "0600"
        - src: ../templates/simple_fence.sh.j2
          dest: "/opt/repmgr/scripts/simple_fence.sh"
          mode: "0755"
        - src: ../templates/failover_validation.sh.j2
          dest: "/opt/repmgr/scripts/failover_validation.sh"
          mode: "0755"

    # ===== PHASE 3: REPLICATION SETUP =====

    - name: Setup repmgr replication
      block:
        - name: Verify primary accessibility
          ansible.builtin.wait_for:
            port: 5432
            host: "{{ primary_node }}"
            timeout: 60

        - name: Test primary connection with repmgr credentials
          community.postgresql.postgresql_query:
            login_host: "{{ primary_node }}"
            login_user: "{{ repmgr_user }}"
            login_password: "{{ repmgr_password }}"
            login_db: "{{ repmgr_database }}"
            query: "SELECT 'Connection successful' as status"
          register: primary_connection_test
          become_user: postgres

        - name: Prepare for replication setup
          block:
            - name: Stop PostgreSQL service
              ansible.builtin.service:
                name: postgresql
                state: stopped

            - name: Backup existing data if present
              ansible.builtin.shell: |
                if [ -d "{{ postgresql_data_dir }}" ] && [ "$(ls -A {{ postgresql_data_dir }} 2>/dev/null)" ]; then
                  mv {{ postgresql_data_dir }} {{ postgresql_data_dir }}.backup.{{ ansible_date_time.epoch }}
                  echo "Backed up existing data directory"
                else
                  echo "No existing data to backup"
                fi
              register: backup_result

            - name: Create clean data directory
              ansible.builtin.file:
                path: "{{ postgresql_data_dir }}"
                state: directory
                owner: postgres
                group: postgres
                mode: "0700"

          when: not replica_configured.stat.exists

        - name: Clone replica from primary
          ansible.builtin.shell: |
            cd /tmp
            sudo -u postgres repmgr -h {{ primary_node }} -U {{ repmgr_user }} -d {{ repmgr_database }} \
              -f /etc/repmgr/{{ postgresql_version }}/repmgr.conf standby clone --force
          environment:
            PGPASSWORD: "{{ repmgr_password }}"
          register: repmgr_clone_result
          when: not replica_configured.stat.exists

        - name: Display clone results
          ansible.builtin.debug:
            msg: "{{ repmgr_clone_result.stdout_lines | default(['Clone skipped - already configured']) }}"

      when: repmgr_enabled | default(false)

    # Legacy replication setup
    - name: Setup legacy replication
      block:
        - name: Stop PostgreSQL for legacy setup
          ansible.builtin.service:
            name: postgresql
            state: stopped
          when: not replica_configured.stat.exists

        - name: Clean data directory for legacy setup
          ansible.builtin.file:
            path: "{{ postgresql_data_dir }}"
            state: absent
          when: not replica_configured.stat.exists

        - name: Create data directory
          ansible.builtin.file:
            path: "{{ postgresql_data_dir }}"
            state: directory
            owner: postgres
            group: postgres
            mode: "0700"
          when: not replica_configured.stat.exists

        - name: Run pg_basebackup for legacy replica
          ansible.builtin.shell: |
            PGPASSWORD="{{ repsvc_password }}" sudo -u postgres /usr/bin/pg_basebackup \
              -h {{ primary_node }} -U {{ repsvc_user }} -p 5432 \
              -D {{ postgresql_data_dir }} -P -R -X stream
          when: not replica_configured.stat.exists
          register: pg_basebackup_result

        - name: Display basebackup results
          ansible.builtin.debug:
            msg: "{{ pg_basebackup_result.stdout_lines | default([]) }}"
          when: not replica_configured.stat.exists

      when: not (repmgr_enabled | default(false))

    # ===== PHASE 4: SERVICE STARTUP =====

    - name: Ensure instance drop-in directory exists
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ pg_service_name }}.d"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Install guard drop-in (template)
      ansible.builtin.template:
        src: ../templates/guard.conf.j2
        dest: "/etc/systemd/system/{{ pg_service_name }}.d/guard.conf"
        owner: root
        group: root
        mode: "0644"
      register: guard_dropin

    - name: Reload systemd if drop-in changed
      ansible.builtin.command: systemctl daemon-reload
      when: guard_dropin.changed

    - name: Check for standby.signal
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/standby.signal"
      register: standby_sig

    - name: Check for allow-primary-start marker
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/allow-primary-start"
      register: allow_primary_marker

    - name: Ensure standby.signal exists on replica
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}/standby.signal"
        state: touch
        owner: postgres
        group: postgres
        mode: "0640"
      when: not standby_sig.stat.exists and not allow_primary_marker.stat.exists
      register: standby_touch

    - name: Restart PostgreSQL instance if drop-in changed
      ansible.builtin.service:
        name: "{{ pg_service_name }}"
        state: restarted
      when: guard_dropin.changed or (standby_touch is defined and standby_touch.changed)

    - name: Start PostgreSQL service
      ansible.builtin.service:
        name: "{{ pg_service_name }}"
        state: started
        enabled: yes

    - name: Wait for PostgreSQL to be ready
      ansible.builtin.wait_for:
        port: 5432
        host: "127.0.0.1"
        delay: 10
        timeout: 120

    # ===== PHASE 5: REPLICATION VERIFICATION =====

    - name: Verify replication setup
      block:
        - name: Check recovery status
          community.postgresql.postgresql_query:
            login_db: postgres
            query: |
              SELECT
                pg_is_in_recovery() as is_replica,
                pg_last_wal_receive_lsn() as last_wal_received,
                CASE
                  WHEN pg_is_in_recovery() THEN 'REPLICA'
                  ELSE 'PRIMARY/ERROR'
                END as node_role
          register: recovery_status
          become_user: postgres

        - name: Display recovery status
          ansible.builtin.debug:
            msg: |
              Replication Status:
              - Role: {{ recovery_status.query_result[0].node_role }}
              - Last WAL: {{ recovery_status.query_result[0].last_wal_received }}

        - name: Verify replica is working
          ansible.builtin.fail:
            msg: "Replica setup failed - node is not in recovery mode"
          when: not recovery_status.query_result[0].is_replica

    # ===== PHASE 6: REPMGR REGISTRATION =====

    - name: Register and start repmgr services
      block:
        - name: Register replica with repmgr
          ansible.builtin.shell: |
            sudo -u postgres repmgr -f /etc/repmgr/{{ postgresql_version }}/repmgr.conf standby register --force
          when: repmgr_status.rc != 0
          register: repmgr_registration

        - name: Display registration results
          ansible.builtin.debug:
            msg: "{{ 'Replica registered successfully' if repmgr_registration.changed else 'Replica already registered' }}"

        - name: Start repmgrd service
          ansible.builtin.systemd:
            name: "repmgrd@{{ postgresql_version }}"
            state: started
            enabled: yes
            daemon_reload: yes

        - name: Verify repmgrd is running
          ansible.builtin.systemd:
            name: "repmgrd@{{ postgresql_version }}"
          register: repmgrd_status

        - name: Display repmgrd status
          ansible.builtin.debug:
            msg: "repmgrd service: {{ repmgrd_status.status.ActiveState }}"

      # Drop-in already installed during service startup

      when: repmgr_enabled | default(false)
