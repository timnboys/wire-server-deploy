- name: Clean previous deployment state
  hosts: "{{ target_nodes | default('postgresql_rw,postgresql_ro') }}"
  become: yes
  tasks:
    - name: Check if PostgreSQL is installed
      stat:
        path: "/usr/bin/psql"
      register: postgresql_installed

    - name: Check if PostgreSQL service exists
      systemd:
        name: "postgresql@{{ postgresql_version }}-main.service"
      register: postgresql_service_exists
      failed_when: false

    - name: Stop any existing split-brain monitoring timer
      systemd:
        name: detect-rouge-primary.timer
        state: stopped
      failed_when: false

    - name: Stop any existing split-brain monitoring service
      systemd:
        name: detect-rouge-primary.service
        state: stopped
      failed_when: false

    - name: Stop any existing repmgrd service
      systemd:
        name: "repmgrd@{{ postgresql_version }}-main.service"
        state: stopped
      failed_when: false

    - name: Unmask PostgreSQL services from previous deployments
      systemd:
        name: "postgresql@{{ postgresql_version }}-main.service"
        masked: no
      failed_when: false

    - name: Stop PostgreSQL service for clean state
      systemd:
        name: "postgresql@{{ postgresql_version }}-main.service"
        state: stopped
      failed_when: false

    - name: Check if repmgr database exists
      community.postgresql.postgresql_query:
        login_db: postgres
        query: "SELECT 1 FROM pg_database WHERE datname = '{{ repmgr_database }}'"
      register: repmgr_db_exists
      become_user: postgres
      failed_when: false
      when:
        - postgresql_installed.stat.exists
        - postgresql_service_exists.status is defined
        - postgresql_service_exists.status.LoadState != "not-found"

    - name: Clean repmgr node registration (if database exists)
      community.postgresql.postgresql_query:
        db: "{{ repmgr_database }}"
        login_user: "{{ repmgr_user }}"
        login_password: "{{ repmgr_password }}"
        query: "DELETE FROM repmgr.nodes WHERE node_name = '{{ inventory_hostname }}';"
      failed_when: false
      when:
        - postgresql_installed.stat.exists
        - repmgr_db_exists is defined
        - repmgr_db_exists.query_result is defined
        - repmgr_db_exists.query_result | length > 0

    - name: Remove monitoring scripts and configuration
      file:
        path: "{{ item }}"
        state: absent
      failed_when: false
      loop:
        - "/usr/local/bin/detect_rouge_primary.sh"
        - "/etc/systemd/system/detect-rouge-primary.service"
        - "/etc/systemd/system/detect-rouge-primary.timer"
        - "/etc/sudoers.d/postgres-postgresql-management"

    - name: Remove repmgr configuration files (both path formats)
      file:
        path: "{{ item }}"
        state: absent
      failed_when: false
      loop:
        # Both possible path formats
        - "/etc/repmgr/{{ postgresql_version }}/repmgr.conf"
        - "/etc/repmgr/{{ postgresql_version }}-main/repmgr.conf"
        - "/var/lib/postgresql/{{ postgresql_version }}/main/recovery.conf"
        - "/var/lib/postgresql/{{ postgresql_version }}/main/standby.signal"

    - name: Remove repmgr directories (both formats)
      file:
        path: "{{ item }}"
        state: absent
      failed_when: false
      loop:
        - "/etc/repmgr/{{ postgresql_version }}"
        - "/etc/repmgr/{{ postgresql_version }}-main"

    - name: Reload systemd daemon after cleanup
      systemd:
        daemon_reload: yes
      failed_when: false

    - name: Display cleanup status
      debug:
        msg: |
          Cleanup completed:
          - PostgreSQL installed: {{ postgresql_installed.stat.exists }}
          - PostgreSQL service exists: {{ postgresql_service_exists.status.LoadState != "not-found" if postgresql_service_exists.status is defined else false }}
          - repmgr database exists: {{ (repmgr_db_exists.query_result | length > 0) if repmgr_db_exists.query_result is defined else false }}
          - All files and services cleaned up
