# The assethost will host assets other machines will download
assethost_host: "{{ hostvars['assethost'].ansible_host }}:8080"
# When set to true; will set up all the repos below before continuing
# to bootstrap; such that no network access is needed
offline: true

# This is copied from kubespray. We need it here too, as we run commands on hosts via the bastion too
ansible_ssh_common_args: "{% if 'bastion' in groups['all'] %} -o ProxyCommand='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -W %h:%p {{ hostvars['bastion']['ansible_user'] }}@{{ hostvars['bastion']['ansible_host'] }} {% if ansible_ssh_private_key_file is defined %}-i {{ ansible_ssh_private_key_file }}{% endif %} ' {% endif %}"

# This is used nowhere inside kubespray, only inside this file
# and our own playbooks
ubuntu_repos: "http://{{ assethost_host }}/debs-{{ ansible_distribution_release }}/public"
ubuntu_repo_base_url: "{{ ubuntu_repos }}"
ubuntu_repo_gpgkey: "{{ ubuntu_repos }}/gpg"

docker_ubuntu_repo_base_url: "{{ ubuntu_repos }}"
docker_ubuntu_repo_gpgkey: "{{ ubuntu_repos }}/gpg"
# docker_ubuntu_repo_repokey: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"

binaries_url: "http://{{ assethost_host }}/binaries"
nodelocaldns_ip: 10.233.0.10

kube_version: "v1.29.10"
etcd_version: "v3.5.16"

kubeadm_download_url: "{{ binaries_url }}/kubeadm"
kubectl_download_url: "{{ binaries_url }}/kubectl"
kubelet_download_url: "{{ binaries_url }}/kubelet"
cni_download_url: "{{ binaries_url }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz"
crictl_download_url: "{{ binaries_url }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz"
calicoctl_download_url: "{{ binaries_url }}/calicoctl-linux-{{ image_arch }}"
calicoctl_alternate_download_url: "{{ binaries_url }}/calicoctl-linux-{{ image_arch }}"
calico_crds_download_url: "{{ binaries_url }}/{{ calico_version }}.tar.gz"
containerd_download_url: "{{ binaries_url }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"
runc_download_url: "{{ binaries_url }}/runc.{{ image_arch }}"
etcd_download_url: "{{ binaries_url }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz"
nerdctl_download_url: "{{ binaries_url }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz"
cassandra_url: "{{ binaries_url }}/apache-cassandra-3.11.16-bin.tar.gz"
prometheus_jmx_url: "{{ binaries_url }}/jmx_prometheus_javaagent-0.10.jar"

# The elasticsearch role is turing-complete in determining the right repo,
# and elastic.co doesn't seem to advertise their -oss repo anymore either
# Just provide the .deb from the asset host
es_install_java: false
es_version: "6.8.23"
es_use_repository: false
es_custom_package_url: "{{ binaries_url }}/elasticsearch-oss-6.8.23.deb"

minio_server_artifact_url: "{{ binaries_url }}/minio.RELEASE.2023-07-07T07-13-57Z"
minio_server_artifact_checksum: sha256:f6d1aadf4baec1556880e659748d7fbc6bc8d2dac3554f816e95492d3881660a
minio_server_upgrade_from_checksums : [ "sha256:2c7e6774a9befbba6a126791f363550f8f14e34008e100d0e0e57e2ad9b2ab8c" ]

minio_client_artifact_url: "{{ binaries_url }}/mc.RELEASE.2023-10-24T05-18-28Z"
minio_client_artifact_checksum: sha256:5f12926b646b533cdea1a548c54460a4dad78f27b8b17d399ba02ff4ee368e4d
minio_client_upgrade_from_checksums : [ "sha256:59e184bd4e2c3a8a19837b0f0da3977bd4e301495a24e4a5d50e291728a1de51", "sha256:205a2dc5a49dc467f78228c43c7d368e376c6cc14492597a7c4fe195c291f074" ]

kubeconfig_localhost: true
#resolvconf_mode: none

# This defaults to true if http://169.254.169.254/latest/meta-data exists; which
# is also available in non-AWS. e.g. in Hetzner. Lets not let this autodetect in offline
is_aws_environment: False

# IP address for the logging (for example QRadar) server
# this is not used in offline mode, but is here if required
# syslog_target_ip: 12.34.56.78

# OVERRIDES

coredns_version: "v1.11.4"
ingress_nginx_version: "v1.12.1"
metrics_server_version: "v0.7.2"
ingress_nginx_kube_webhook_certgen_image_tag: "v20231011-8b53cabe0"
cert_manager_version: "v1.16.3"
nginx_image_tag: "1.25.4-alpine"

# postgresql configuration
postgresql_version: 17
postgresql_data_dir: /var/lib/postgresql/{{ postgresql_version }}/main
postgresql_conf_dir: /etc/postgresql/{{ postgresql_version }}/main
repmgr_user: repmgr
repmgr_password: "securepassword"
repmgr_database: repmgr_db
# to use the local packages, set postgresql_use_repository to false
postgresql_use_repository: false  # Set to true to use local packages from urls
# when updating the packages, update the checksums too in wire-server-deploy/nix/pkgs/wire-binaries.nix
postgresql_pkgs:
- name: libpq5
  url: "{{ binaries_url }}/libpq5_17.5-1.pgdg22.04+1_amd64.deb"
  checksum: "sha256:97cec98aa147de384066a027693e5a0864009e2209d170f891cb0d7583735936"
- name: postgresql-client-common
  url: "{{ binaries_url }}/postgresql-client-common_281.pgdg22.04+1_all.deb"
  checksum: "sha256:c5ee58fea51a19753ac0496d06538c6a194705b11aef27683047e9c4ebff2c5e"
- name: postgresql-common-dev
  url: "{{ binaries_url }}/postgresql-common-dev_281.pgdg22.04+1_all.deb"
  checksum: "sha256:aa116b0861d149dcba5cbf0cb6af611d9d59bd83178ee9c66c60363ce6cf77d0"
- name: postgresql-common
  url: "{{ binaries_url }}/postgresql-common_281.pgdg22.04+1_all.deb"
  checksum: "sha256:317308f1eaeb8c3f93fdc3eaa5430290e5bce62b4bba3f78045ff339d6a8e7a1"
- name: postgresql-client-17
  url: "{{ binaries_url }}/postgresql-client-17_17.5-1.pgdg22.04+1_amd64.deb"
  checksum: "sha256:1b3e96f9f488f234734266a7a212c7c3ac189ba763939a313906e3f2fe5492bb"
- name: postgresql-17
  url: "{{ binaries_url }}/postgresql-17_17.5-1.pgdg22.04+1_amd64.deb"
  checksum: "sha256:0ba8064cee5800f290485c3974081b399736feca050ad6ae06dd26d2c26cf167"
- name: python3-psycopg2
  url: "{{ binaries_url }}/python3-psycopg2_2.9.10-1.pgdg22.04+1_amd64.deb"
  checksum: "sha256:cc2f749e3af292a67e012edeb4aa5d284f57f2d66a9a09fe5b81e5ffda73cab4"
