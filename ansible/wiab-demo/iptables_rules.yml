- name: Configure Iptable rules
  hosts: deploy_node
  become: yes
  tasks:
  - name: Get the default interface for the default route
    shell: ip route | awk '/default/ {print $5}' | head -n 1
    register: default_interface
    changed_when: false

  - name: Get the IP address of the default interface
    shell: ip -4 addr show dev {{ default_interface.stdout }} | awk '/inet / {print $2}' | cut -d/ -f1
    register: default_interface_ip
    changed_when: false

  - name: Get the IP address of the k8s_ingress_controller node
    shell: |
      kubectl get node {{ k8s_ingress_controller_node }} -o json | jq -r '.status.addresses[] | select(.type=="InternalIP").address'
    register: k8s_ingress_controller_ip
    become: yes
    become_user: "{{ ansible_user }}"
    changed_when: false

  - name: Configure DNAT rules to send http/https traffic to the k8s ingress controller
    iptables:
      table: nat
      chain: PREROUTING
      protocol: "{{ item.protocol }}"
      jump: DNAT
      in_interface: "{{ default_interface.stdout }}"
      destination: "{{ default_interface_ip.stdout }}"
      destination_port: "{{ item.port }}"
      to_destination: "{{ k8s_ingress_controller_ip.stdout }}:{{ item.to_port }}"
      state: present
      action: insert
    loop: "{{ http_dnat_rules }}"
    loop_control:
      label: "Setting DNAT rule for port {{ item.port }} -> {{ k8s_ingress_controller_ip.stdout | default('undefined') }}:{{ item.to_port }}"

  - name: Get the {{ minikube_network_name }} Docker network ID
    shell: |
      docker network inspect {{ minikube_network_name }} | jq -r '.[0].Id'
    register: docker_network_id
    changed_when: false

  - name: Get all interfaces with bridge interfaces
    shell: ip -o addr show | awk '{print $2}' | grep -i 'br-'
    register: bridge_interfaces
    changed_when: false

  - name: Find the matching bridge interface for {{ minikube_network_name }} Docker network
    shell: |
      for iface in {{ bridge_interfaces.stdout_lines | join(' ') }}; do
        iface_id=$(echo "$iface" | cut -d '-' -f2)
        if echo "{{ docker_network_id.stdout }}" | grep -q "$iface_id"; then
          echo "$iface"
          break
        fi
      done
    register: matching_bridge_interface
    changed_when: false
    
  - name: Ensure FORWARD rule for traffic from main interface to ingress controller
    iptables:
      table: filter
      chain: FORWARD
      in_interface: "{{ default_interface.stdout }}"
      out_interface: "{{ matching_bridge_interface.stdout }}"
      jump: ACCEPT
      state: present
      action: insert

  - name: Ensure FORWARD rule for traffic from ingress controller to main interface
    iptables:
      table: filter
      chain: FORWARD
      in_interface: "{{ matching_bridge_interface.stdout }}"
      out_interface: "{{ default_interface.stdout }}"
      jump: ACCEPT
      state: present
      action: insert

  - name: Get the IP address of the coturn node
    shell: |
      kubectl get node {{ coturn_k8s_node }} -o json | jq -r '.status.addresses[] | select(.type=="InternalIP").address'
    register: coturn_k8s_node_ip
    become: yes
    become_user: "{{ ansible_user }}"
    changed_when: false

  - name: Configure DNAT rule to send UDP traffic for coturn to coturn server on k8s node
    iptables:
      table: nat
      chain: PREROUTING
      protocol: udp
      jump: DNAT
      destination: "{{ default_interface_ip.stdout }}"
      destination_ports: "49152:65535"
      in_interface: "{{ default_interface.stdout }}"
      to_destination: "{{ coturn_k8s_node_ip.stdout }}"
      state: present
      action: insert

  - name: Configure DNAT rules to reach turn servers running on k8s node
    iptables:
      table: nat
      chain: PREROUTING
      protocol: "{{ item.protocol }}"
      jump: DNAT
      in_interface: "{{ default_interface.stdout }}"
      destination: "{{ default_interface_ip.stdout }}"
      destination_port: "{{ item.port }}"
      to_destination: "{{ coturn_k8s_node_ip.stdout }}:{{ item.to_port }}"
      state: present
      action: insert
    loop: "{{ turn_dnat_rules }}"
    loop_control:
      label: "Setting DNAT rule for port {{ item.port }} -> {{ coturn_k8s_node_ip.stdout | default('undefined') }}:{{ item.to_port }}"

  - name: Ensure /etc/iptables directory exists
    ansible.builtin.file:
      path: /etc/iptables
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Save iptables rules
    shell: iptables-save -f /etc/iptables/rules.v4
