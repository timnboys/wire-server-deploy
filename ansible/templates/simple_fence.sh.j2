#!/bin/bash
# simple_fence.sh - Event-driven cluster fencing
# Generated by Ansible from your tested configuration

set -euo pipefail

# Configuration
PGUSER="{{ repmgr_user }}"
PGDATABASE="{{ repmgr_database }}"
LOGFILE="/var/log/postgresql/fence_events.log"
SCRIPT_NAME="simple_fence"

# Node mappings (auto-generated from inventory)
declare -A NODE_HOSTS=(
{% for host in groups['postgresql_rw'] + groups['postgresql_ro'] %}
    [{{ repmgr_node_config[host].node_id }}]="{{ hostvars[host]['ansible_default_ipv4']['address'] | default(hostvars[host]['ansible_host']) }}"
{% endfor %}
)
declare -A NODE_NAMES=(
{% for host in groups['postgresql_rw'] + groups['postgresql_ro'] %}
    [{{ repmgr_node_config[host].node_id }}]="{{ host }}"
{% endfor %}
)

# Logging function
log_event() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SCRIPT_NAME] $1" | tee -a "$LOGFILE"
}

# Function to update node status in metadata
update_node_status() {
    local target_node_id="$1"
    local new_status="$2"  # true or false
    local reason="$3"
    local target_name="${NODE_NAMES[$target_node_id]}"
    local update_query="UPDATE repmgr.nodes SET active = $new_status WHERE node_id = $target_node_id;"
    local updated=false

    log_event "Updating node $target_name (ID: $target_node_id) status to: $new_status"
    log_event "Reason: $reason"

    for host in "${NODE_HOSTS[@]}"; do
        if psql -h "$host" -U "$PGUSER" -d "$PGDATABASE" -c "$update_query" >/dev/null 2>&1; then
            log_event "Successfully updated metadata via $host"
            updated=true
            break
        fi
    done

    if [[ "$updated" == "false" ]]; then
        log_event "ERROR: Failed to update metadata on any host"
        return 1
    fi

    log_event "Node $target_name fencing status: active=$new_status"
    return 0
}

# Manual fence/unfence operations
if [[ "${1:-}" == "fence" && -n "${2:-}" ]]; then
    NODE_NAME="$2"
    mkdir -p "$(dirname "$LOGFILE")"
    for id in "${!NODE_NAMES[@]}"; do
        if [[ "${NODE_NAMES[$id]}" == "$NODE_NAME" ]]; then
            log_event "=== MANUAL FENCE REQUEST ==="
            update_node_status "$id" "false" "Manual fence request"
            exit $?
        fi
    done
    log_event "ERROR: Unknown node name: $NODE_NAME"
    exit 1
fi

if [[ "${1:-}" == "unfence" && -n "${2:-}" ]]; then
    NODE_NAME="$2"
    mkdir -p "$(dirname "$LOGFILE")"
    for id in "${!NODE_NAMES[@]}"; do
        if [[ "${NODE_NAMES[$id]}" == "$NODE_NAME" ]]; then
            log_event "=== MANUAL UNFENCE REQUEST ==="
            update_node_status "$id" "true" "Manual unfence request"
            exit $?
        fi
    done
    log_event "ERROR: Unknown node name: $NODE_NAME"
    exit 1
fi

# If we get here, this is an event notification call
NODE_ID="$1"
EVENT="$2"
SUCCESS="$3"

# Function to get current primary node
get_current_primary() {
    local query="SELECT node_id, node_name FROM repmgr.nodes WHERE type = 'primary' AND active = true;"
    for host in "${NODE_HOSTS[@]}"; do
        local result
        if result=$(psql -h "$host" -U "$PGUSER" -d "$PGDATABASE" -t -c "$query" 2>/dev/null); then
            echo "$result" | tr -d ' '
            return 0
        fi
    done
    return 1
}

# Event handler functions
handle_failover_promote() {
    log_event "=== FAILOVER PROMOTION EVENT ==="
    log_event "New primary: Node $NODE_ID (${NODE_NAMES[$NODE_ID]})"
    if [[ "$SUCCESS" == "1" ]]; then
        local old_primary
        if old_primary=$(get_current_primary); then
            local old_primary_id=$(echo "$old_primary" | cut -d'|' -f1)
            local old_primary_name=$(echo "$old_primary" | cut -d'|' -f2)
            if [[ "$old_primary_id" != "$NODE_ID" ]]; then
                log_event "Fencing old primary: $old_primary_name (ID: $old_primary_id)"
                update_node_status "$old_primary_id" "false" "Fenced due to failover promotion"
            fi
        fi
        log_event "Promotion successful - cluster state updated"
    else
        log_event "Promotion failed - no fencing action taken"
    fi
}

handle_node_rejoin() {
    log_event "=== NODE REJOIN EVENT ==="
    log_event "Rejoining node: Node $NODE_ID (${NODE_NAMES[$NODE_ID]})"
    if [[ "$SUCCESS" == "1" ]]; then
        log_event "Unfencing rejoined node: ${NODE_NAMES[$NODE_ID]}"
        update_node_status "$NODE_ID" "true" "Unfenced due to successful rejoin"
    # remove allow-primary-start to keep this node as standby
    rm -f {{ postgresql_data_dir }}/allow-primary-start || true
        log_event "Node rejoin successful - node unfenced"
    else
        log_event "Node rejoin failed - keeping fenced status"
    fi
}

handle_standby_promote() {
    log_event "=== STANDBY PROMOTION EVENT ==="
    log_event "Promoting standby: Node $NODE_ID (${NODE_NAMES[$NODE_ID]})"
    if [[ "$SUCCESS" == "1" ]]; then
    # allow primary start on this host
    touch {{ postgresql_data_dir }}/allow-primary-start || true
        log_event "Standby promotion successful"
        handle_failover_promote
    else
        log_event "Standby promotion failed"
    fi
}

handle_repmgrd_start() {
    log_event "=== REPMGRD START EVENT ==="
    log_event "repmgrd started on node: Node $NODE_ID (${NODE_NAMES[$NODE_ID]})"
}

handle_repmgrd_stop() {
    log_event "=== REPMGRD STOP EVENT ==="
    log_event "repmgrd stopped on node: Node $NODE_ID (${NODE_NAMES[$NODE_ID]})"
}

handle_default_event() {
    log_event "=== UNHANDLED EVENT ==="
    log_event "Event: $EVENT"
    log_event "Node: $NODE_ID (${NODE_NAMES[$NODE_ID]})"
    log_event "Success: $SUCCESS"
    log_event "No specific action defined for this event"
}

# Main event dispatcher
main() {
    mkdir -p "$(dirname "$LOGFILE")"
    log_event "=== FENCE EVENT TRIGGERED ==="
    log_event "Node ID: $NODE_ID"
    log_event "Event: $EVENT"
    log_event "Success: $SUCCESS"
    if [[ ! -v NODE_NAMES[$NODE_ID] ]]; then
        log_event "ERROR: Unknown node ID: $NODE_ID"
        exit 1
    fi
    case "$EVENT" in
        "repmgrd_failover_promote") handle_failover_promote ;;
        "node_rejoin") handle_node_rejoin ;;
        "standby_promote") handle_standby_promote ;;
        "repmgrd_start") handle_repmgrd_start ;;
        "repmgrd_stop") handle_repmgrd_stop ;;
        *) handle_default_event ;;
    esac
    log_event "Event processing completed"
}

# Run main event processing
main "$@"