#!/bin/bash
# detect_rouge_primary.sh - Split-brain monitoring tool

HOSTNAME=$(hostname)

# Cluster nodes from Ansible inventory (excluding myself)
CLUSTER_NODES=(
{%- set all_nodes = (groups.postgresql_rw | default([])) + (groups.postgresql_ro | default([])) %}
{%- for node in all_nodes %}
{%- if node != inventory_hostname %}
    "{{ hostvars[node].ansible_default_ipv4.address | default(hostvars[node].ansible_host | default(node)) }}"
{%- endif %}
{%- endfor %}
)

# Database connection settings
DB_USER="{{ repmgr_user }}"
DB_PASSWORD="{{ repmgr_password }}"
DB_NAME="{{ repmgr_database | default('postgres') }}"

# Check if I'm primary with no replicas
IS_PRIMARY=$(psql -t -q -c "SELECT NOT pg_is_in_recovery();" -d postgres | tr -d ' ')
REPLICA_COUNT=$(psql -t -q -c "SELECT COUNT(*) FROM pg_stat_replication;" -d postgres | tr -d ' ')

echo "[$HOSTNAME] I am primary: $IS_PRIMARY, Replica count: $REPLICA_COUNT"

if [[ "$IS_PRIMARY" == "t" && "$REPLICA_COUNT" == "0" ]]; then
    echo "[$HOSTNAME] I'm isolated primary - checking other cluster nodes..."

    SPLIT_BRAIN_DETECTED=false

    # Check each cluster node
    for NODE_IP in "${CLUSTER_NODES[@]}"; do
        echo "[$HOSTNAME] Checking node $NODE_IP for primary status..."

        # Check if remote node is also primary
        PGPASSWORD="$DB_PASSWORD" psql -h "$NODE_IP" -U "$DB_USER" -d "$DB_NAME" \
            -t -q -c "SELECT NOT pg_is_in_recovery();" 2>/dev/null | tr -d ' ' > /tmp/remote_status_${NODE_IP//\./_}

        REMOTE_PRIMARY=$(cat /tmp/remote_status_${NODE_IP//\./_} 2>/dev/null)

        if [[ "$REMOTE_PRIMARY" == "t" ]]; then
            echo "[$HOSTNAME] üö® SPLIT-BRAIN DETECTED: Node $NODE_IP is also PRIMARY!"
            SPLIT_BRAIN_DETECTED=true
            break
        elif [[ -n "$REMOTE_PRIMARY" ]]; then
            echo "[$HOSTNAME] Node $NODE_IP is replica (good)"
        else
            echo "[$HOSTNAME] Node $NODE_IP is unreachable or down"
        fi

        # Cleanup temp file
        rm -f /tmp/remote_status_${NODE_IP//\./_}
    done

    if [[ "$SPLIT_BRAIN_DETECTED" == "true" ]]; then
        echo "[$HOSTNAME] üõë STOPPING POSTGRESQL TO RESOLVE SPLIT-BRAIN"
        logger "Split-brain detected on $HOSTNAME - stopping PostgreSQL service"

        # Mask FIRST to prevent restart attempts
        echo "[$HOSTNAME] Masking PostgreSQL service to prevent restart..."
        sudo systemctl mask postgresql@{{ postgresql_version }}-main.service

        # Then stop PostgreSQL service
        echo "[$HOSTNAME] Stopping PostgreSQL service..."
        sudo systemctl stop postgresql@{{ postgresql_version }}-main.service

        # Verify the stop actually worked
        echo "[$HOSTNAME] Verifying PostgreSQL has stopped..."
        sleep 2
        if systemctl is-active --quiet postgresql@{{ postgresql_version }}-main.service; then
            echo "[$HOSTNAME] ‚ö†Ô∏è PostgreSQL still active, attempting force stop..."
            sudo systemctl kill postgresql@{{ postgresql_version }}-main.service
            sleep 2

            if systemctl is-active --quiet postgresql@{{ postgresql_version }}-main.service; then
                echo "[$HOSTNAME] ‚ùå Failed to stop PostgreSQL - manual intervention required"
                logger "CRITICAL: Failed to stop PostgreSQL during split-brain resolution on $HOSTNAME"
            else
                echo "[$HOSTNAME] ‚úÖ PostgreSQL successfully stopped after force kill"
            fi
        else
            echo "[$HOSTNAME] ‚úÖ PostgreSQL successfully stopped"
        fi

        echo "[$HOSTNAME] PostgreSQL stopped and masked - manual intervention required"
        exit 1
    else
        echo "[$HOSTNAME] ‚úÖ No split-brain detected - I'm the only primary in reachable nodes"
    fi
else
    echo "[$HOSTNAME] Not an isolated primary - no split-brain check needed"
fi

echo "[$HOSTNAME] Split-brain monitoring check completed"
exit 0